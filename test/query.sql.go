// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package test

import (
	"context"
)

const createUsers = `-- name: CreateUsers :exec
INSERT INTO users(
  name, email, password 
) VALUES (
  $1, $2, $3
)
`

func (q *Queries) CreateUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createUsers)
	return err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users 
WHERE id = $1
`

func (q *Queries) DeleteUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUsers)
	return err
}

const getUsers = `-- name: GetUsers :one
SELECT id, name, email, password FROM users 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUsers(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, getUsers)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, password FROM users 
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUsers = `-- name: UpdateUsers :exec
UPDATE users
  set name = $2,
  email = $3,
  password = $3
WHERE id = $1
`

func (q *Queries) UpdateUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateUsers)
	return err
}
