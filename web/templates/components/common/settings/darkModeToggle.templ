package settings 

import (
	"github.com/JosunHK/josun-go.git/web/templates/components/ui/button"
	"github.com/JosunHK/josun-go.git/web/templates/components/ui/dropDownMenu"
	"github.com/JosunHK/josun-go.git/web/templates/components/ui/icon"
	"github.com/JosunHK/josun-go.git/cmd/util/i18n"
	"github.com/gungun974/gocva"
)

templ DarkModeToggle() {
	@dropDownMenu.DropDownMenu(dropDownMenu.Props{}) {
		@dropDownMenu.DropDownMenuTrigger(dropDownMenu.Props{}) {
			@button.Button(button.Props{
				Variant: gocva.Variant{
					"variant": "outline",
					"size":    "icon",
				},
			}) {
				@dropDownMenu.DropDownMenuTriggerIcon(dropDownMenu.Props{
					Attrs: templ.Attributes{
                        "x-cloak": "",
						":class": "{ 'hidden' : !Alpine.store('darkMode').on }",
					},
				}) {
					@icon.Moon()
				}
				@dropDownMenu.DropDownMenuTriggerIcon(dropDownMenu.Props{
					Attrs: templ.Attributes{
                        "x-cloak": "",
						":class": "{ 'hidden' : Alpine.store('darkMode').on }",
					},
				}) {
					@icon.Sun()
				}
			}
		}
		@dropDownMenu.DropDownMenuContent(dropDownMenu.Props{
                Class:  "right-0",
            }) {
			@dropDownMenu.DropDownMenuItem(dropDownMenu.Props{
				Attrs: templ.Attributes{
					"@item-clicked": "Alpine.store('darkMode').setMode(true)",
				},
			}) {
				{ i18nUtil.T(ctx,"dark_mode") }
			}
			@dropDownMenu.DropDownMenuItem(dropDownMenu.Props{
				Attrs: templ.Attributes{
					"@item-clicked": "Alpine.store('darkMode').setMode(false)",
				},
			}) {
				{ i18nUtil.T(ctx,"light_mode") }
			}
		}
	}
	@DarkModeToggleScript()
}

templ DarkModeToggleScript() {
	<script>
        document.addEventListener('alpine:init', () => {
                Alpine.store('darkMode', {
                    on: Alpine.$persist(true).as('darkModeOn'),
                    setMode(mode) {
                        this.on = mode
                    }
                })
        })
    </script>
}
