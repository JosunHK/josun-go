package selectBox 

import (
	"fmt"
	sqlc "github.com/JosunHK/josun-go.git/db/generated"
	"github.com/JosunHK/josun-go.git/web/templates/components/ui/icon"
	twmerge "github.com/Oudwins/tailwind-merge-go/pkg/twmerge"
)

var M = twmerge.Merge

type Props struct {
	Selected sqlc.MenuItem
	Name     string
	Class    string
	Attrs    templ.Attributes
}

type BodyProps struct {
	Selected  sqlc.MenuItem
	Name      string
	Id        string
	Class     string
	Attrs     templ.Attributes
	ItemAttrs templ.Attributes
}

templ SelectTriggerIcon(props Props) {
	<div
		class={ M("m-1 h-5 w-5", props.Class) }
		{ props.Attrs... }
	>
		{ children... }
	</div>
}

templ SelectIcon(props Props) {
	<div
		class={ M("ml-2 h-4 w-4", props.Class) }
		{ props.Attrs... }
	>
		{ children... }
	</div>
}

templ SelectDisplay(props Props) {
	<div
		x-text="selectedLabel"
		:style="`width: calc(${maxLength} * 1rem`"
		class={ M("flex items-center", props.Class) }
		{ props.Attrs... }
	></div>
}

templ SelectTrigger(props Props) {
	<div
		class={ M("lex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1", props.Class) }
		x-ref="button"
		x-on:click="toggle();"
		:aria-expanded="open"
		:aria-controls="$id('dropdown-button')"
		type="button"
		{ props.Attrs... }
	>
		<div
			class="flex items-center justify-between flex-row"
		>
			{ children... }
			@SelectIcon(Props{}) {
				@icon.ChevronDown()
			}
		</div>
	</div>
}

templ SelectContent(props Props) {
	<div
		x-ref="panel"
		x-show="open"
		x-transition.origin.top
		x-on:click.outside="close($refs.button)"
		:id="$id('dropdown-button')"
		style="display: none;"
		class={ M("z-50 rounded-md border bg-popover p-1 text-popover-foreground shadow-md absolute max-h-[12rem] overflow-y-auto", props.Class) }
		{ props.Attrs... }
	>
		{ children... }
	</div>
}

templ SelectItem(props Props, item sqlc.MenuItem) {
	<div
		x-data={ fmt.Sprintf(`{
            label : '%s',
            value : '%s',
        }`, item.Label, item.Value) }
		x-init="options.set(value,$el);setLength(label.length);setDefault(label, value);"
		@click="toggle(); selectedLabel = label; selectedValue = value; $dispatch('item-clicked')"
		:style="`width: calc(${maxLength} * 1rem + 40px)`"
		label={ item.Label }
		value={ item.Value }
		class={ M("relative flex cursor-default select-none items-center justify-between rounded-sm px-2 py-1.5 text-sm outline-none transition-colors hover:bg-accent hover:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", props.Class) }
		:class="disabled.has(value) ? 'pointer-events-none opacity-50' : ''"
		{ props.Attrs... }
	>
		{ children... }
		@SelectIcon(Props{
			Class: "ml-2",
			Attrs: templ.Attributes{
				"x-show": "selectedValue === value",
			},
		}) {
			@icon.Check()
		}
	</div>
}

templ SelectLabel(props Props) {
	<div
		x-init="setLength($el.innerText.length)"
		class={ M("px-2 py-1.5 text-sm font-semibold", props.Class) }
		{ props.Attrs... }
	>
		{ children... }
	</div>
}

var scriptHandle = templ.NewOnceHandle()

templ SelectBody(props BodyProps) {
	<div
		class={ M("max-w-min", props.Class) }
		x-init={ fmt.Sprintf("setDefault('%v', '%v');", props.Selected.Label, props.Selected.Value) }
		x-data="{
                    open: false,
                    selectedLabel: '',
                    selectedValue: '',
                    maxLength: 0,
                    options: new Map(),
                    disabled: new Map(),
                    setDefault(label, value){
                        if (this.selectedLabel === '') {
                            this.selectedLabel = label 
                            this.selectedValue = value
                        }
                    },
                    disableOption: function(value){
                        let opt = this.options.get(value);
                        this.disabled.set(value, opt);
                        if(this.selectedValue === value){
                            for (let [key, val] of this.options) {
                                if(!this.disabled.has(key)){
                                    this.selectedLabel = val.getAttribute('label');
                                    this.selectedValue = val.getAttribute('value');
                                    break;
                                }
                            }
                            if(this.selectedValue === value){
                                this.selectedLabel = '';
                                this.selectedValue = '';
                            }
                        }
                    },
                    clearDisabled: function(){
                        this.disabled = new Map();
                    },
                    toggle() {
                        if (this.open) {
                            return this.close()
                        }
                        this.$refs.button.focus()
                        this.open = true
                    },
                    setLength(length) {
                        if (length > this.maxLength) {
                            (this.maxLength = length)
                        } 
                    },
                    close(focusAfter) {
                        if (! this.open) return
         
                        this.open = false
         
                        focusAfter && focusAfter.focus()
                    }
                }"
		x-on:keydown.escape.prevent.stop="close($refs.button)"
		x-on:focusin.window="! $refs.panel.contains($event.target) && close()"
		x-id="['dropdown-button']"
		{ props.Attrs... }
	>
		<input
			type="text"
			style="display:none"
			name={ props.Name }
			x-model="selectedValue"
		/>
		{ children... }
	</div>
}

templ SelectSeparator(props Props) {
	<hr
		class={ M("-mx-1 my-1 h-px bg-muted", props.Class) }
		{ props.Attrs... }
	/>
}
