package dropDownMenu

import (
	twmerge "github.com/JosunHK/josun-go.git/pkg/twmerge"
	"github.com/JosunHK/josun-go.git/web/templates/components/ui/icon"
	base "github.com/JosunHK/josun-go.git/web/templates/props"
)

var M = twmerge.Merge

templ DropDownMenuTriggerIcon(props base.Props) {
	<div
		class={ M("m-1 h-5 w-5", props.Class) }
		{ props.Attrs... }
	>
		{ children... }
	</div>
}

templ DropDownMenuIcon(props base.Props) {
	<div
		class={ M("mr-2 h-4 w-4", props.Class) }
		{ props.Attrs... }
	>
		{ children... }
	</div>
}

templ DropDownMenuTrigger(props base.Props) {
	<div
		class={ props.Class }
		x-ref="button"
		x-on:click="toggle()"
		:aria-expanded="open"
		:aria-controls="$id('dropdown-button')"
		type="button"
		{ props.Attrs... }
	>
		{ children... }
	</div>
}

templ DropDownMenuSub(props base.Props) {
	<div
		class={ M("relative", props.Class) }
	>
		<div
			class={ props.Class }
			x-data="{
            open: false,
            toggle() {
                if (this.open) {
                    return this.close()
                }
 
                this.$refs.button.focus()
 
                this.open = true
            },
            close(focusAfter) {
                if (! this.open) return
 
                this.open = false
 
                focusAfter && focusAfter.focus()
            }
        }"
			x-on:keydown.escape.prevent.stop="close($refs.button)"
			x-on:focusin.window="! $refs.panel.contains($event.target) && close()"
			x-id="['dropdown-button']"
			{ props.Attrs... }
		>
			{ children... }
		</div>
	</div>
}

templ DropDownMenuSubTrigger(props base.Props) {
	<div
		x-ref="button"
		x-on:click="toggle()"
		:aria-expanded="open"
		:aria-controls="$id('dropdown-button')"
		type="button"
		class={ M("flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none hover:bg-accent ", props.Class) }
		{ props.Attrs... }
	>
		{ children... }
		@DropDownMenuIcon(base.Props{
			Class: "ml-auto h-4 w-4",
		}) {
			@icon.ChevronRight()
		}
	</div>
}

templ DropDownMenuSubContent(props base.Props) {
	<div
		x-ref="panel"
		x-show="open"
		x-transition.origin.top.left
		x-on:click.outside="close($refs.button)"
		:id="$id('dropdown-button')"
		style="display: none;"
		class={ M(`z-50 min-w-[max-content] overflow-hidden rounded-md border absolute top-0 left-full bg-popover p-1
            text-popover-foreground shadow-lg`, props.Class) }
		{ props.Attrs... }
	>
		{ children... }
	</div>
}

templ DropDownMenuContent(props base.Props) {
	<div
		x-ref="panel"
		x-show="open"
		x-transition.origin.top.left
		x-on:click.outside="close($refs.button)"
		:id="$id('dropdown-button')"
		style="display: none;"
		class={ M("z-50 min-w-[max-content] rounded-md border bg-popover p-1 text-popover-foreground shadow-md absolute", props.Class) }
		{ props.Attrs... }
	>
		{ children... }
	</div>
}

templ DropDownMenuItem(props base.Props) {
	<div
		@click={ "toggle(); $dispatch('item-clicked')" }
		class={ M("relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors hover:bg-accent hover:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", props.Class) }
		{ props.Attrs... }
	>
		{ children... }
	</div>
}

templ DropDownMenuCheckBoxItem(props base.Props, checked string) {
	<div
		class={ M("relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors hover:bg-accent hover:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", props.Class) }
		checked={ checked }
		{ props.Attrs... }
	>
		<span class="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
			<div>
				<div class="h-4 w-4"></div>
			</div>
		</span>
		{ children... }
	</div>
}

templ DropDownMenuRadioItem(props base.Props) {
	<div
		class={ M("relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors hover:bg-accent hover:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", props.Class) }
		{ props.Attrs... }
	>
		<span class="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
			<div>
				<span class="h-2 w-2 fill-current"></span>
			</div>
		</span>
		{ children... }
	</div>
}

templ DropDownMenuLabel(props base.Props) {
	<div
		class={ M("px-2 py-1.5 text-sm font-semibold", props.Class) }
		{ props.Attrs... }
	>
		{ children... }
	</div>
}

templ DropDownMenu(props base.Props) {
	<div
		class={ props.Class }
		x-data="{
            open: false,
            toggle() {
                if (this.open) {
                    return this.close()
                }
 
                this.$refs.button.focus()
 
                this.open = true
            },
            close(focusAfter) {
                if (! this.open) return
 
                this.open = false
 
                focusAfter && focusAfter.focus()
            }
        }"
		x-on:keydown.escape.prevent.stop="close($refs.button)"
		x-on:focusin.window="! $refs.panel.contains($event.target) && close()"
		x-id="['dropdown-button']"
		{ props.Attrs... }
	>
		{ children... }
	</div>
}

templ DropDownMenuSeparator(props base.Props) {
	<hr
		class={ M("-mx-1 my-1 h-px bg-muted", props.Class) }
		{ props.Attrs... }
	/>
}

templ DropDownMenuShortcut(props base.Props) {
	<span
		class={ M("ml-auto text-xs tracking-widest opacity-60", props.Class) }
		{ props.Attrs... }
	>
		{ children... }
	</span>
}
