package toggle

import (
	"fmt"
	"github.com/Oudwins/tailwind-merge-go/pkg/twmerge"
	"github.com/gungun974/gocva"
)

var M = twmerge.Merge

var cva = gocva.CVA{
	Base: `inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background 
    transition-colors hover:bg-eGreen/20 hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2
    focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50
    data-[state=on]:bg-eGreen data-[state=on]:text-background`,
	Variants: gocva.Variants{
		"variant": {
			"default": "bg-transparent",
			"outline": "border border-input bg-transparent hover:text-accent-foreground",
			"outline-destructive": "outline-muted outline-1 outline bg-transparent hover:text-accent-foreground data-[state=on]:bg-eRed data-[state=on]:outline-0 hover:bg-eRed/20",
			"destructive": "bg-transparent data-[state=on]:bg-eRed hover:bg-eRed/20",
		},
		"size": {
			"default": "h-10 px-3",
			"sm":      "h-9 px-2.5",
			"lg":      "h-11 px-5",
		},
	},
	DefaultVariants: gocva.Variant{
		"variant": "default",
		"size":    "default",
	},
}

type Props struct {
	Class   string
	Variant gocva.Variant
	Name    string
	Attrs   templ.Attributes
}

templ Toggle(props Props, toggled bool) {
	<div
		x-data={ fmt.Sprintf(`{
                toggled: %v,
            }`, toggled) }
		class={ M(cva.Render(props.Variant), props.Class) }
        @click="toggled = !toggled"
		:data-state="toggled? 'on' : 'off'"
		{ props.Attrs... }
	>
		<input
			type="text"
			style="display:none"
			name={ props.Name }
			x-model="toggled"
		/>
		{ children... }
	</div>
}
