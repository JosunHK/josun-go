package datepicker 

import (
	"github.com/JosunHK/josun-go.git/web/templates/components/ui/button"
	"github.com/JosunHK/josun-go.git/web/templates/components/ui/icon"
	"github.com/JosunHK/josun-go.git/web/templates/components/ui/input"
	base "github.com/JosunHK/josun-go.git/web/templates/props"
	"github.com/gungun974/gocva"
)

templ DatePickerTrigger() {
	@input.Input(input.InputProps{
		Type: "text",
		Props: base.Props{
			Class: "pl-[2.5rem] focus-visible:ring-0 focus-visible:ring-offset-0 hover:bg-accent transition-colors",
			Attrs: templ.Attributes{
				"placeholder":     "Select date",
				"readonly":        "",
				"x-ref":           "datePickerInput",
				"x-model":         "datePickerValue",
				"@click":          "datePickerOpen=!datePickerOpen",
				"@keydown.escape": "datePickerOpen=false",
			},
		},
	})
	<div
		@click="datePickerOpen=!datePickerOpen; if(datePickerOpen){ $refs.datePickerInput.focus() }"
		class="absolute top-[0.3rem] left-0 px-3 py-2 cursor-pointer text-primary hover:text-neutral-500"
	>
		<div class="mr-2 h-4 w-4">
			@icon.Calendar()
		</div>
	</div>
}

templ DatePickerHeader() {
	<div class="flex items-center justify-between mb-2">
		<div class="flex justify-between w-full items-center">
			@button.Button(
				button.ButtonProps{
					Variant: gocva.Variant{
						"variant": "outline",
						"size":    "iconxs",
					},
					Props: base.Props{
						Class: "text-primary",
						Attrs: templ.Attributes{
							"@click": "datePickerPreviousMonth()",
						},
					},
				},
			) {
				<div class="h-4 w-4">
					@icon.ChevronLeft()
				</div>
			}
			<div>
				<span x-text="datePickerMonthNames[datePickerMonth]" class=" font-bold text-primary text-sm"></span>
				<span x-text="datePickerYear" class="ml-1 font-bold text-sm text-primary"></span>
			</div>
			@button.Button(
				button.ButtonProps{
					Variant: gocva.Variant{
						"variant": "outline",
						"size":    "iconxs",
					},
					Props: base.Props{
						Class: "text-primary",
						Attrs: templ.Attributes{
							"@click": "datePickerNextMonth()",
						},
					},
				},
			) {
				<div class="h-4 w-4">
					@icon.ChevronRight()
				</div>
			}
		</div>
	</div>
}

templ DatePickerDays() {
	<div class="grid grid-cols-7 mb-3">
		<template x-for="(day, index) in datePickerDays" :key="index">
			<div class="px-0.5">
				<div x-text="day" class="text-xs font-medium text-center text-muted-foreground"></div>
			</div>
		</template>
	</div>
}

templ DatePickerDates() {
	<div class="grid grid-cols-7">
		<template x-for="blankDay in datePickerBlankDaysInMonth">
			<div class="p-1 text-sm text-center border border-transparent"></div>
		</template>
		<template x-for="(day, dayIndex) in datePickerDaysInMonth" :key="dayIndex">
			@button.Button(
				button.ButtonProps{
					Variant: gocva.Variant{
						"variant": "ghost",
						"size":    "iconsm",
					},
					Props: base.Props{
						Class: "mx-1",
                        Attrs: templ.Attributes{
                            "@click": "datePickerDayClicked(day)",
					        "x-text": "day",
                            ":class": `{
                                'bg-primary text-primary-foreground' : datePickerIsSelectedDate(day) == true, 
                                'bg-accent text-primary': datePickerIsToday(day) == true && datePickerIsSelectedDate(day) == false,
                                'text-primary hover:bg-accent': datePickerIsToday(day) == false && datePickerIsSelectedDate(day) == false,
                            }`, 
                        },
					},
				},)
		</template>
	</div>
}

templ DatePickerContainer() {
	<div
		x-show="datePickerOpen"
		x-transition.origin.top
		@click.away="datePickerOpen = false"
		class="absolute text-sm top-0 left-0 max-w-lg p-4 mt-12 antialiased bg-background border rounded-lg shadow w-[18rem] border-accent"
	>
		{ children... }
	</div>
}

templ DatePicker() {
	<div
		x-data="datepicker"
		x-init="
        currentDate = new Date();
        if (datePickerValue) {
            currentDate = new Date(Date.parse(datePickerValue));
        }
        datePickerMonth = currentDate.getMonth();
        datePickerYear = currentDate.getFullYear();
        datePickerDay = currentDate.getDay();
        datePickerValue = datePickerFormatDate( currentDate );
        datePickerCalculateDays();
    "
		x-cloak
	>
		<div class="w-full">
			<div class="relative w-[18rem]">
				@DatePickerTrigger()
				@DatePickerContainer() {
					@DatePickerHeader()
					@DatePickerDays()
					@DatePickerDates()
				}
			</div>
		</div>
	</div>
	<script>
        document.addEventListener('alpine:init', () => {
            Alpine.data('datepicker', () => ({
              datePickerOpen: false,
              datePickerValue: '',
              datePickerFormat: 'M d, Y',
              datePickerMonth: '',
              datePickerYear: '',
              datePickerDay: '',
              datePickerDaysInMonth: [],
              datePickerBlankDaysInMonth: [],
              datePickerMonthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
              datePickerDays: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
              datePickerDayClicked(day) {
                let selectedDate = new Date(this.datePickerYear, this.datePickerMonth, day);
                this.datePickerDay = day;
                this.datePickerValue = this.datePickerFormatDate(selectedDate);
                this.datePickerIsSelectedDate(day);
                this.datePickerOpen = false;
              },
              datePickerPreviousMonth(){
                if (this.datePickerMonth == 0) { 
                    this.datePickerYear--; 
                    this.datePickerMonth = 12; 
                } 
                this.datePickerMonth--;
                this.datePickerCalculateDays();
              },
              datePickerNextMonth(){
                if (this.datePickerMonth == 11) { 
                    this.datePickerMonth = 0; 
                    this.datePickerYear++; 
                } else { 
                    this.datePickerMonth++; 
                }
                this.datePickerCalculateDays();
              },
              datePickerIsSelectedDate(day) {
                const d = new Date(this.datePickerYear, this.datePickerMonth, day);
                return this.datePickerValue === this.datePickerFormatDate(d) ? true : false;
              },
              datePickerIsToday(day) {
                const today = new Date();
                const d = new Date(this.datePickerYear, this.datePickerMonth, day);
                return today.toDateString() === d.toDateString() ? true : false;
              },
              datePickerCalculateDays() {
                let daysInMonth = new Date(this.datePickerYear, this.datePickerMonth + 1, 0).getDate();
                // find where to start calendar day of week
                let dayOfWeek = new Date(this.datePickerYear, this.datePickerMonth).getDay();
                let blankdaysArray = [];
                for (var i = 1; i <= dayOfWeek; i++) {
                    blankdaysArray.push(i);
                }
                let daysArray = [];
                for (var i = 1; i <= daysInMonth; i++) {
                    daysArray.push(i);
                }
                this.datePickerBlankDaysInMonth = blankdaysArray;
                this.datePickerDaysInMonth = daysArray;
              },
              datePickerFormatDate(date) {
                let formattedDay = this.datePickerDays[date.getDay()];
                let formattedDate = ('0' + date.getDate()).slice(-2); // appends 0 (zero) in single digit date
                let formattedMonth = this.datePickerMonthNames[date.getMonth()];
                let formattedMonthShortName = this.datePickerMonthNames[date.getMonth()].substring(0, 3);
                let formattedMonthInNumber = ('0' + (parseInt(date.getMonth()) + 1)).slice(-2);
                let formattedYear = date.getFullYear();

                if (this.datePickerFormat === 'M d, Y') {
                  return `${formattedMonthShortName} ${formattedDate}, ${formattedYear}`;
                }
                if (this.datePickerFormat === 'MM-DD-YYYY') {
                  return `${formattedMonthInNumber}-${formattedDate}-${formattedYear}`;
                }
                if (this.datePickerFormat === 'DD-MM-YYYY') {
                  return `${formattedDate}-${formattedMonthInNumber}-${formattedYear}`;
                }
                if (this.datePickerFormat === 'YYYY-MM-DD') {
                  return `${formattedYear}-${formattedMonthInNumber}-${formattedDate}`;
                }
                if (this.datePickerFormat === 'D d M, Y') {
                  return `${formattedDay} ${formattedDate} ${formattedMonthShortName} ${formattedYear}`;
                }
                
                return `${formattedMonth} ${formattedDate}, ${formattedYear}`;
              },
            }))
        })
    </script>
}

