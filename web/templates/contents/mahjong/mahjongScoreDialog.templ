package mahjongTemplates

import (
	"fmt"
	i18nUtil "github.com/JosunHK/josun-go.git/cmd/util/i18n"
	menuProvider "github.com/JosunHK/josun-go.git/cmd/util/menuProvider"
	sqlc "github.com/JosunHK/josun-go.git/db/generated"
	"github.com/JosunHK/josun-go.git/web/templates/components/ui/button"
	"github.com/JosunHK/josun-go.git/web/templates/components/ui/card"
	"github.com/JosunHK/josun-go.git/web/templates/components/ui/dialog"
	"github.com/JosunHK/josun-go.git/web/templates/components/ui/icon"
	"github.com/JosunHK/josun-go.git/web/templates/components/ui/input"
	"github.com/JosunHK/josun-go.git/web/templates/components/ui/label"
	"github.com/JosunHK/josun-go.git/web/templates/components/ui/selectBox"
	switchToggle "github.com/JosunHK/josun-go.git/web/templates/components/ui/swtichToggle"
	"github.com/JosunHK/josun-go.git/web/templates/components/ui/tabs"
	"github.com/JosunHK/josun-go.git/web/templates/components/ui/toggle"
	"github.com/gungun974/gocva"
)

templ DialogForm(code string) {
	<form
		hx-post={ fmt.Sprintf("/mahjong/updateScore/%v", code) }
		hx-params="not confirm"
        hx-target="#err-msg"
		hx-on::after-request="window.dispatchEvent(new CustomEvent('close-dialog', { bubbles: true }))"
	>
		{ children... }
	</form>
}

templ ScoreDialogLayout() {
	@dialog.Dialog(dialog.Props{}) {
		@card.Card(card.Props{
			Class: "w-[400px] drop-shadow-xl",
		}) {
			{ children... }
            <div class="w-full text-center" id="err-msg"></div>
			<div class="p-2 flex flex-row justify-end w-full ">
				@button.Button(button.Props{
					Name:  "confirm",
					Class: "w-min",
					Attrs: templ.Attributes{
						"@close-ddialog.window": "dialogToggle()",
					},
					Variant: gocva.Variant{
						"variant": "default",
					},
				}) {
					{ i18nUtil.T(ctx, "confirm") }
				}
			</div>
		}
	}
}

templ ScoreDialog(players []sqlc.MahjongPlayer, code string) {
	@DialogForm(code) {
		@ScoreDialogLayout() {
			@DialogContent(players)
		}
	}
}

templ DialogTabs() {
	<div class="w-full h-full flex flex-col p-2">
		<div>
			@tabs.TabsList(tabs.Props{
				Class: "w-full flex flex-row justify-center items-center gap-4 z-[100]",
			}) {
				@tabs.TabsTrigger(tabs.Props{
					Class: "grow",
				}, "game_win") {
					{ i18nUtil.T(ctx, "game_win") }
				}
				@tabs.TabsTrigger(tabs.Props{
					Class: "grow",
				}, "game_draw") {
					{ i18nUtil.T(ctx, "game_draw") }
				}
				@tabs.TabsTrigger(tabs.Props{
					Class: "grow",
				}, "game_manual") {
					{ i18nUtil.T(ctx, "game_manual") }
				}
			}
		</div>
		{ children... }
	</div>
}

templ DialogContent(players []sqlc.MahjongPlayer) {
	@tabs.TabsContext(tabs.Props{
		Class: "p-5",
	}, "game_win") {
		@DialogTabs() {
			<div class="h-min min-h-[15rem]">
				@tabs.TabsContent(tabs.Props{}, "game_win") {
					<fieldset
						:disabled="activeTab !== 'game_win'"
					>
						<input type="hidden" name="updateType" value="win"/>
						@DialogContentWin(players)
					</fieldset>
				}
				@tabs.TabsContent(tabs.Props{}, "game_draw") {
					<fieldset
						:disabled="activeTab !== 'game_draw'"
					>
						<input type="hidden" name="updateType" value="draw"/>
						@DialogContentDraw(players)
					</fieldset>
				}
				@tabs.TabsContent(tabs.Props{}, "game_manual") {
					<fieldset
						:disabled="activeTab !== 'game_manual'"
					>
						<input type="hidden" name="updateType" value="manual"/>
						@DialogContentManual(players)
					</fieldset>
				}
			</div>
		}
	}
}

templ DialogContentWin(players []sqlc.MahjongPlayer) {
	@card.Card(card.Props{
		Class: "w-full h-[25rem] border-0 shadow-none overflow-auto",
	}) {
		@card.Content(card.Props{
			Class: "flex flex-col gap-1",
			Attrs: templ.Attributes{
				"x-data": `{
                        currentOptions: new Set(),
                        isTsumo: false,
                    }`,
			},
		}) {
			@KyoutakuSelectwin(players)
			@winnerSelectMenu(players)
			@addPlayerToggle() {
				@winnerSelectMenuExtra(1, players)
				@addPlayerToggle() {
					@winnerSelectMenuExtra(2, players)
				}
			}
		}
	}
}

templ addPlayerToggle() {
	<div x-data="{open:false}">
		@toggle.Toggle(toggle.Props{
			Class: "w-full my-2",
			Attrs: templ.Attributes{
				":Class":   "{'bg-eRed': open, 'bg-eGreen': !open}",
				"x-effect": "open = toggled",
			},
			Variant: gocva.Variant{
				"variant": "no-color",
				"size":    "xs",
			},
		}, false) {
			@icon.Wrapper(icon.Props{
				Class: "text-foreground",
				Attrs: templ.Attributes{
					"x-show": "!open",
				},
			}) {
				@icon.Plus()
			}
			@icon.Wrapper(icon.Props{
				Class: "text-foreground",
				Attrs: templ.Attributes{
					"x-show": "open",
				},
			}) {
				@icon.Minus()
			}
		}
		<fieldset x-show="open" :disabled="!open">
			{ children... }
		</fieldset>
	</div>
}

templ winnerSelectContext(i int) {
	<div x-data="{playerId : '', han : '', fu: '', }">
		@input.HiddenXInputArray("winner", i, "playerId", "playerId")
		@input.HiddenXInputArray("winner", i, "han", "han")
		@input.HiddenXInputArray("winner", i, "fu", "fu")
		{ children... }
	</div>
}

templ winnerSelectMenu(players []sqlc.MahjongPlayer) {
	@winnerSelectContext(0) {
		@WinnerSelect(players, getPlayerMenu(players))
		@TsumoToggle()
		@LoserSelect(players)
		@ScoreSelect()
	}
}

templ winnerSelectMenuExtra(i int, players []sqlc.MahjongPlayer) {
	<div class="flex flex-col gap-1">
		@winnerSelectContext(i) {
			@WinnerSelect(players, getPlayerMenuPlease(ctx, players))
			@ScoreSelect()
		}
	</div>
}

templ WinnerSelect(players []sqlc.MahjongPlayer, menu []sqlc.MenuItem) {
	<div class="flex flex-row items-center justify-between">
		@label.Label(label.Props{
			Variant: gocva.Variant{
				"variant": "default",
			}}) {
			{ i18nUtil.T(ctx, "game_winner") }
		}
		@selectBox.Select(menu, selectBox.BodyProps{
			ExtraInit: `$watch('selectedValue', (value, oldValue) => {
                            currentOptions = new Set([...currentOptions].filter(item => item !== oldValue)); 
                            currentOptions.add(value);
                        });`,
			Attrs: templ.Attributes{
				"x-effect": `
                    playerId = currentOptions;
                    clearDisabled();
                    currentOptions.forEach(
                        option => {selectedValue !== option && disableOption(option)}
                    );
                `,
			}})
	</div>
}

templ KyoutakuSelectwin(players []sqlc.MahjongPlayer) {
	@label.Label(label.Props{
		Class: "text-xl font-semibold my-2",
		Variant: gocva.Variant{
			"variant": "default",
		}}) {
		{ i18nUtil.T(ctx, "please_select_player_riichi") }
	}
	<div class="grid-cols-2 grid gap-1">
		for i, player := range players {
			@toggle.Toggle(toggle.Props{
				Attrs: templ.Attributes{},
				Variant: gocva.Variant{
					"variant": "outline-eOrange",
					"size":    "sm",
				},
			}, false) {
				@input.HiddenInputArray("riichiPlayers", i, "playerId", fmt.Sprintf("%v", player.ID))
				@input.HiddenXInputArray("riichiPlayers", i, "riichi", "toggled")
				{ player.Name }
			}
		}
	</div>
}

templ TsumoToggle() {
	<div class="flex flex-row items-center justify-between">
		@label.Label(label.Props{
			Variant: gocva.Variant{
				"variant": "default",
			}}) {
			{ i18nUtil.T(ctx, "tsu_mo") }
		}
		@switchToggle.Toggle(switchToggle.Props{
			Name: "isTsumo",
			Attrs: templ.Attributes{
				"x-effect": "isTsumo = checked",
			},
		}, false)
	</div>
}

templ LoserSelect(players []sqlc.MahjongPlayer) {
	<div
		class="h-10"
	>
		<div
			class="flex flex-row items-center justify-between"
			x-show="!isTsumo"
			x-transition.duration.500ms
		>
			@label.Label(label.Props{
				Variant: gocva.Variant{
					"variant": "default",
				}}) {
				{ i18nUtil.T(ctx, "game_loser") }
			}
			@selectBox.Select(getPlayerMenuPlease(ctx, players), selectBox.BodyProps{
				Name:     "loserId",
				Required: true,
				ExtraInit: `$watch('selectedValue', (value, oldValue) => {
                                currentOptions = new Set([...currentOptions].filter(item => item !== oldValue)); 
                                currentOptions.add(value);
                            });`,
				Attrs: templ.Attributes{
                    ":class": "selectedValue === '' ? 'text-eRed' : ''",
					"x-effect": `
                    clearDisabled();
                    currentOptions.forEach(
                        option => {
                            selectedValue !== option && disableOption(option) 
                        }
                    );
                `,
				},
			})
		</div>
	</div>
}

templ ScoreSelect() {
	<div
		class="flex flex-row items-center justify-between"
	>
		@label.Label(label.Props{
			Variant: gocva.Variant{
				"variant": "default",
			}}) {
			{ i18nUtil.T(ctx, "han") }
		}
		@selectBox.Select(menuProvider.GetMenu(ctx, "han"), selectBox.BodyProps{
			Attrs: templ.Attributes{
				"x-effect": "han = selectedValue",
			},
		})
	</div>
	<div
		class="flex flex-row items-center justify-between"
	>
		@label.Label(label.Props{
			Variant: gocva.Variant{
				"variant": "default",
			}}) {
			{ i18nUtil.T(ctx, "fu") }
		}
		@selectBox.Select(menuProvider.GetMenu(ctx, "fu"), selectBox.BodyProps{
			Attrs: templ.Attributes{
				"x-effect": "fu = selectedValue",
			},
		})
	</div>
}

templ DialogContentDraw(players []sqlc.MahjongPlayer) {
	@card.Card(card.Props{
		Class: "w-full h-full border-0 shadow-none",
	}) {
		@card.Content(card.Props{
			Class: "flex flex-col gap-1",
			Attrs: templ.Attributes{},
		}) {
			@drawPlayerContext(players)
		}
	}
}

templ drawPlayerContext(players []sqlc.MahjongPlayer) {
	<div
		x-data="{
        drawPlayers: new Map(),
        riichiPlayers: new Map(),
    }"
	>
		@DrawPlayerSelect(players)
		@KyoutakuSelectDraw(players)
	</div>
}

templ KyoutakuSelectDraw(players []sqlc.MahjongPlayer) {
	@label.Label(label.Props{
		Class: "text-xl font-semibold my-2",
		Variant: gocva.Variant{
			"variant": "default",
		}}) {
		{ i18nUtil.T(ctx, "please_select_player_riichi") }
	}
	<div class="grid-cols-2 grid gap-1">
		for i, player := range players {
			@toggle.Toggle(toggle.Props{
				Attrs: templ.Attributes{
					"x-effect": fmt.Sprintf("riichiPlayers.set(%v, toggled);", player.ID),
					":class":   fmt.Sprintf("{'pointer-events-none text-muted bg-muted/20' : drawPlayers.get(%v)}", player.ID),
				},
				Variant: gocva.Variant{
					"variant": "outline-eOrange",
					"size":    "sm",
				},
			}, false) {
				@input.HiddenInputArray("riichiPlayers", i, "playerId", fmt.Sprintf("%v", player.ID))
				@input.HiddenXInputArray("riichiPlayers", i, "riichi", "toggled")
				{ player.Name }
			}
		}
	</div>
}

templ DrawPlayerSelect(players []sqlc.MahjongPlayer) {
	@label.Label(label.Props{
		Class: "text-xl font-semibold mb-2",
		Variant: gocva.Variant{
			"variant": "default",
		}}) {
		{ i18nUtil.T(ctx, "please_select_player_draw") }
	}
	<div class="grid-cols-2 grid gap-1">
		for i, player := range players {
			@toggle.Toggle(toggle.Props{
				Attrs: templ.Attributes{
					"x-effect": fmt.Sprintf("drawPlayers.set(%v, toggled)", player.ID),
					":class":   fmt.Sprintf("{'pointer-events-none text-muted bg-muted/20' : riichiPlayers.get(%v)}", player.ID),
				},
				Variant: gocva.Variant{
					"variant": "outline-destructive",
					"size":    "sm",
				},
			}, false) {
				@input.HiddenInputArray("drawPlayers", i, "playerId", fmt.Sprintf("%v", player.ID))
				@input.HiddenXInputArray("drawPlayers", i, "noTen", "toggled")
				{ player.Name }
			}
		}
	</div>
}

templ DialogContentManual(players []sqlc.MahjongPlayer) {
	<div>
		@label.Label(label.Props{
			Class: "text-xl font-semibold mb-2",
			Variant: gocva.Variant{
				"variant": "default",
			}}) {
			{ i18nUtil.T(ctx, "please_select_player_manual") }
		}
		<div
			class="flex flex-row items-center justify-between gap-1"
		>
			@selectBox.Select(getPlayerMenu(players), selectBox.BodyProps{
				Name: "playerId",
			})
			@input.Input(input.Props{
				Class: "w-full",
				Name:  "score",
				Attrs: templ.Attributes{
					"placeholder": i18nUtil.T(ctx, "score"),
				},
			})
		</div>
	</div>
}
