package mahjongTemplates

import (
	"context"
	"fmt"
	mahjongStruct "github.com/JosunHK/josun-go.git/cmd/struct/mahjong"
	i18nUtil "github.com/JosunHK/josun-go.git/cmd/util/i18n"
	templUtil "github.com/JosunHK/josun-go.git/cmd/util/templ"
	sqlc "github.com/JosunHK/josun-go.git/db/generated"
	"github.com/JosunHK/josun-go.git/web/templates/components/ui/button"
	"github.com/JosunHK/josun-go.git/web/templates/components/ui/card"
	"github.com/JosunHK/josun-go.git/web/templates/components/ui/icon"
	"github.com/JosunHK/josun-go.git/web/templates/components/ui/input"
	"github.com/JosunHK/josun-go.git/web/templates/components/ui/label"
)

func getPlayerColor(i int) string {
	switch i {
	case 0:
		return "border-l-eRed"
	case 1:
		return "border-l-eOrange"
	case 2:
		return "border-l-eYellow"
	case 3:
		return "border-l-eGreen"
	default:
		return "border-l-eRed"
	}
}

func getRoundTitle(ctx context.Context, round string) string {
	switch round {
	case "east":
		return i18nUtil.T(ctx, "east_round")
	case "south":
		return i18nUtil.T(ctx, "south_round")
	case "west":
		return i18nUtil.T(ctx, "west_round")
	case "north":
		return i18nUtil.T(ctx, "north_round")
	default:
		return i18nUtil.T(ctx, "east_round")
	}
}

func getCardData(player sqlc.MahjongPlayer) string {
	playerJSON := templUtil.ToJSONString(player)
	return fmt.Sprintf(`{
        player : %s,
        counter : new countUp.CountUp('player-%d', 0, {duration: 0.75}),
    }`, playerJSON, player.ID)
}

func getPlayerMenu(players []sqlc.MahjongPlayer) []sqlc.MenuItem {
	items := []sqlc.MenuItem{}
	for _, player := range players {
		items = append(items, sqlc.MenuItem{
			Label:     player.Name,
			Value:     fmt.Sprintf("%v", player.ID),
			SortOrder: -1,
		})

	}
	return items
}

func getPlayerMenuPlease(ctx context.Context, players []sqlc.MahjongPlayer) []sqlc.MenuItem {
	items := append([]sqlc.MenuItem{
		{
			Label: i18nUtil.T(ctx, "please_select"),
			Value: "",
		},
	}, getPlayerMenu(players)...)

	return items
}

templ Room(players []sqlc.MahjongPlayer, code string, gameState sqlc.MahjongGameState) {
	<div
		Class="w-full h-full flex flex-col"
		x-ref="room"
		x-data="{
                players: new Map(),
                delta: 0,
                gameState: {},
                isShowDelta: false,
                focused: false,
                updatePlayers: function(newPlayers) {
                    let oriPlayers = this.players;
                    newPlayers.forEach((newPlayer) => {
                        let player = oriPlayers.get(newPlayer.id)
                        player.score = newPlayer.score
                    });
                },
                showDelta: function(eventType, score) {
                    // prevents when there is a 'enter event' after another 'enter event' without 'leave event'
                    if (this.focused && (eventType === 'mousedown' || eventType === 'touchstart')) {
                        return;
                    }else if (eventType === 'mouseup' || eventType === 'touchend') {
                        this.focused = false;
                    }else if (eventType === 'mousedown' || eventType === 'touchstart') {
                        this.focused = true;
                    }
                    this.delta = score;
                    this.isShowDelta = !this.isShowDelta; 
                    if (this.isShowDelta !== this.focused) { //should always be in sync
                        this.isShowDelta = false;
                        this.focused = false;
                    }
                }
            }"
	>
		<div class="h-auto flex flex-col justify-center items-center grow">
			<div class="flex flex-row justify-between w-[350px] items-center px-4 pt-7 pb-2 max-w-[90dvw]">
				<div
					class="grow"
					hx-ext="sse"
					sse-connect={ fmt.Sprintf("/mahjong/room/%v/state", code) }
					sse-swap="data"
				></div>
				@DialogBody(players, code)
			</div>
			@ScoreDisplay(players)
			@RoomCodeDisplay(code)
		</div>
	</div>
}

templ GameStateDisplay(gameState sqlc.MahjongGameState) {
	@label.Label(label.Props{
		Class: "text-[1.5rem] pl-4 text-muted-foreground text-ellipsis text-nowrap overflow-hidden font-wind fade-in flex flex-row justify-between items-center grow",
	}) {
		{ i18nUtil.T(ctx, string(gameState.RoundWind)) + getRoundTitle(ctx, string(gameState.SeatWind)) }
		if gameState.Round > 0 {
			{ " " + i18nUtil.TN(ctx, int(gameState.Round)) + i18nUtil.T(ctx, "honba") }
		}
		@icon.Wrapper(icon.Props{
			Class: "text-[6px] w-[25px]",
		}) {
			@icon.RiichiBo()
		}
		<div class="mr-4">
			{ fmt.Sprint("X", gameState.Kyoutaku) }
		</div>
	}
}

templ ScoreDisplay(players []sqlc.MahjongPlayer) {
	<div
		class="px-4 flex flex-col gap-4"
	>
		for i, player := range players {
			@playerCard(i, player)
		}
	</div>
}

templ playerCard(i int, player sqlc.MahjongPlayer) {
	@card.Card(card.Props{
		Class: fmt.Sprintf("drop-shadow-md border-l-8 max-w-[90dvw] %s", getPlayerColor(i)),
		Attrs: templ.Attributes{
			"x-data":      getCardData(player),
			"@mousedown":  "showDelta($event.type, player.score)",
			"@mouseup":    "showDelta($event.type, player.score)",
			"@touchstart": "showDelta($event.type, player.score)",
			"@touchend":   "showDelta($event.type, player.score)",
		},
	}) {
		<div class="flex flex-row justify-between">
			@label.Label(label.Props{
				Class: "text-[2rem] pl-4 text-muted-foreground text-ellipsis text-nowrap overflow-hidden",
				Attrs: templ.Attributes{},
			}) {
				{ player.Name }
			}
			@label.Label(label.Props{
				Class: "text-[2rem] pr-4 text-ellipsis text-nowrap overflow-hidden font-wind",
				Attrs: templ.Attributes{
					":class": fmt.Sprint("gameState.seat_wind === '", string(player.Wind), "' ? 'text-eBlue' : 'text-muted-foreground'"),
				},
			}) {
				{ i18nUtil.T(ctx, string(player.Wind)) }
			}
		</div>
		@label.Label(label.Props{
			Class: "text-[3.5rem] pl-4 text-ellipsis overflow-hidden",
			Attrs: templ.Attributes{
				"x-show":                   "!isShowDelta",
				"x-transition:enter":       "transition ease-out duration-300",
				"x-transition:enter-start": "opacity-0",
				"x-transition:enter-end":   "opacity-100",
				":class":                   "{ 'text-eRed' : player.score < 0 }",
			},
		}) {
			<div
				id={ fmt.Sprintf("player-%d", player.ID) }
				x-init={ "counter.start();counter.update(player.score);players.set(player.id, player)" }
				x-effect={ "counter.update(player.score)" }
			></div>
		}
		@label.Label(label.Props{
			Class: "text-[3.5rem] pl-4 text-ellipsis text-nowrap overflow-hidden",
			Attrs: templ.Attributes{
				"x-show":                   "isShowDelta",
				"x-transition:enter":       "transition ease-out duration-300",
				"x-transition:enter-start": "opacity-0",
				"x-transition:enter-end":   "opacity-100",
				":class":                   "player.score - delta > 0 ? 'text-eRed' : player.score - delta < 0 ? 'text-eGreen' : '' ",
			},
		}) {
			<div
				x-text="(player.score - delta > 0 ? '+' : '') + (player.score - delta).toLocaleString()"
			></div>
		}
	}
}

templ Update(event mahjongStruct.GameStateUpdated) {
	@GameStateDisplay(event.GameState)
	<x-script
		x-init={ fmt.Sprintf(`$nextTick(() => {
            updatePlayers(%v),
            gameState = %v
        })`, templUtil.ToJSONString(event.Players), templUtil.ToJSONString(event.GameState)) }
	></x-script>
}

templ RoomCodeDisplay(code string) {
	<div class="flex flex-row justify-between w-[350px] items-center px-4 pt-7 pb-2 max-w-[90dvw]">
		<div class="flex flex-row justify-between items-center pl-6">
			for _, char := range code {
				@input.InputRaw(input.Props{
					Class: "w-[3rem] h-[3rem] text-center text-xl border font-bold rounded-none first-of-type:rounded-l-md first-of-type:border-l last-of-type:rounded-r-md pointer-events-none",
					Attrs: templ.Attributes{
						"disabled": "true",
					},
					Value: string(char),
				})
			}
		</div>
		@button.Button(button.Props{
			Class: "ml-4",
			Attrs: templ.Attributes{
				"x-data":     "{ clicked: false }",
				"x-on:click": fmt.Sprint("navigator.clipboard.writeText('", code, "');clicked = true;setTimeout(() => {clicked = false}, 5000)"),
			},
		}) {
			@icon.Wrapper(icon.Props{
				Attrs: templ.Attributes{
					"x-show": "!clicked",
				},
			}) {
				@icon.Copy()
			}
			@icon.Wrapper(icon.Props{
				Attrs: templ.Attributes{
					"x-show": "clicked",
				},
			}) {
				@icon.Check()
			}
		}
	</div>
}

//empty div just for handling init sse connection
templ InitRes() {
	<x-script></x-script>
}
